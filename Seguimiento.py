import streamlit as st
import pandas as pd
import os
from datetime import datetime
from fpdf import FPDF
from PIL import Image

# **CONFIGURACI√ìN DE RUTAS**
BASE_PATH = "C:/Users/sup11/OneDrive/Attachments/Documentos/Interfaces de phyton/Proyecto almacenamiento interactivo"
AUDIT_PATH = os.path.join(BASE_PATH, "Auditorias")
EVIDENCE_PATH = os.path.join(BASE_PATH, "Evidencia fotografica")
DOCUMENT_PATH = os.path.join(BASE_PATH, "Visitas")

# **CREAR CARPETAS SI NO EXISTEN**
os.makedirs(AUDIT_PATH, exist_ok=True)
os.makedirs(EVIDENCE_PATH, exist_ok=True)
os.makedirs(DOCUMENT_PATH, exist_ok=True)

# **C√ìDIGOS ATLAS.TI Y COLORES**
codes_dict = {
    "Participaci√≥n Activa": "üü¢ Verde",
    "Baja Participaci√≥n": "üü° Amarillo",
    "Problemas Organizativos": "üî¥ Rojo",
    "√âxito en la Implementaci√≥n": "üü¢ Verde",
    "Requiere Seguimiento": "üîµ Azul",
    "Impacto Social": "üü£ Morado"
}

# **LISTA DE METAS INTEGRADAS EN EL C√ìDIGO**
metas = [
    "Efectuar 3 Informes trimestrales del Programa de mejora de la supervisi√≥n",
    "Realizar 12 Informes (uno cada mes) de Actividades Relevantes",
    "Realizar seguimiento a la implementaci√≥n de los planes de asesor√≠a en los diferentes niveles educativos",
    "Realizar 10 jornadas acad√©micas con la estructura de supervisi√≥n para fortalecer la comunicaci√≥n interna",
    "Implementar acciones para la actualizaci√≥n sobre m√©todos de asesor√≠a y comunicaci√≥n asertiva",
    "Promover la participaci√≥n de los PCD y ECAEF en los CTE para implementar el plan anal√≠tico",
    "Implementar una estrategia de intervenci√≥n y colaboraci√≥n en el Consejo T√©cnico Escolar",
    "Desarrollar una estrategia de acompa√±amiento en la implementaci√≥n del Plan y Programas de Estudio",
    "Aplicar un plan de asesor√≠a de Educaci√≥n F√≠sica en educaci√≥n b√°sica",
    "Lograr la participaci√≥n del 100% de docentes en el CTE",
    "Realizar asesor√≠a y acompa√±amiento para el 100% de docentes con y sin perfil profesional",
    "Desarrollar una estrategia de intervenci√≥n en el CTE y talleres intensivos de formaci√≥n continua",
    "Desarrollar una estrategia de actualizaci√≥n sobre la propuesta curricular 2022",
    "Realizar al menos tres visitas trimestrales de asesor√≠a a docentes de secundaria",
    "Implementar estrategias para proyectos de educaci√≥n f√≠sica estatales",
    "Dise√±ar una estrategia para la actividad f√≠sica y el cuidado de la salud en el 100% de las escuelas",
    "Implementar al 100% las estrategias de fortalecimiento acad√©mico",
    "Dise√±ar e implementar las etapas de los Juegos Deportivos Escolares"
]

# **INTERFAZ DE STREAMLIT**
st.set_page_config(page_title="Registro de Actividades en Streamlit", layout="wide")
st.title("üìÇ Registro de Actividades en Streamlit")

# **SELECCI√ìN DE ACTIVIDAD Y TURNO**
actividad = st.text_input("üìå Ingrese la actividad:")
fecha_actividad = st.date_input("üìÖ Seleccione la fecha de la actividad:")
turno = st.radio("‚è∞ Seleccione el turno:", ("Matutino (08:00 - 12:30)", "Vespertino (13:30 - 16:30)"))

# **SELECCI√ìN DE META DESDE LISTA INTERNA**
st.subheader("üéØ Selecci√≥n de la Meta Atendida")
meta_seleccionada = st.selectbox("Seleccione la meta atendida:", metas)

# **SUBIDA DEL DOCUMENTO A CONVERTIR EN PDF**
st.subheader("üìÑ Seleccione el documento principal en imagen para convertir en PDF")
documento = st.file_uploader("üìé Subir documento en formato JPG o PNG", type=["jpg", "jpeg", "png"])

# **CAPTURA DE EVIDENCIAS**
st.subheader("üì∏ Captura de Evidencias de la Actividad")
uploaded_files = st.file_uploader("Seleccione im√°genes", type=["jpg", "jpeg", "png"], accept_multiple_files=True)

# **SELECCI√ìN DE C√ìDIGO ATLAS.TI**
st.subheader("üè∑Ô∏è Seleccionar C√≥digo para Atlas.ti")
codigo_seleccionado = st.selectbox("Seleccione un c√≥digo:", list(codes_dict.keys()) + ["Otro"])

if codigo_seleccionado == "Otro":
    nuevo_codigo = st.text_input("Ingrese un nuevo c√≥digo:")
    nuevo_color = st.color_picker("Seleccione un color para el c√≥digo:")
    if nuevo_codigo:
        codes_dict[nuevo_codigo] = nuevo_color
        codigo_seleccionado = nuevo_codigo
        color_codigo = nuevo_color
    else:
        color_codigo = ""
else:
    color_codigo = codes_dict[codigo_seleccionado]

# **GUARDAR REGISTRO EN EXCEL**
if st.button("Guardar Registro de Auditor√≠a"):
    audit_file = os.path.join(AUDIT_PATH, f"Auditoria_{fecha_actividad.strftime('%Y%m%d')}.xlsx")
    data = {
        "Fecha": [fecha_actividad.strftime('%Y-%m-%d')],
        "Actividad": [actividad],
        "Meta Atendida": [meta_seleccionada],
        "Turno": [turno],
        "C√≥digo_Atlas_TI": [codigo_seleccionado],
        "Color_C√≥digo": [color_codigo],
        "Observaciones": [""],
    }
    df = pd.DataFrame(data)
    if os.path.exists(audit_file):
        df_existente = pd.read_excel(audit_file)
        df = pd.concat([df_existente, df], ignore_index=True)
    df.to_excel(audit_file, index=False)
    st.success("‚úÖ Registro de auditor√≠a guardado correctamente.")

    # **GUARDAR DOCUMENTO PRINCIPAL**
    if documento:
        doc_name = f"Documento-{actividad}-{fecha_actividad.strftime('%Y-%m-%d')}.jpg"
        doc_path = os.path.join(DOCUMENT_PATH, doc_name)
        with open(doc_path, "wb") as f:
            f.write(documento.getbuffer())
        st.success("‚úÖ Documento guardado correctamente.")

    # **GUARDAR EVIDENCIAS**
    for i, file in enumerate(uploaded_files, 1):
        file_name = f"{actividad}-{fecha_actividad.strftime('%Y-%m-%d')}-{i:02}.jpg"
        file_path = os.path.join(EVIDENCE_PATH, file_name)
        with open(file_path, "wb") as f:
            f.write(file.getbuffer())
    st.success("‚úÖ Evidencias guardadas correctamente.")

