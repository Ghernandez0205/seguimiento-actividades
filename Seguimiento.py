import streamlit as st
import pandas as pd
import os
import zipfile
from datetime import datetime
from PIL import Image

# **CONFIGURACI√ìN DE RUTAS**
BASE_PATH = "C:/Users/sup11/OneDrive/Attachments/Documentos/Interfaces de phyton/Proyecto almacenamiento interactivo"
EVIDENCE_PATH = os.path.join(BASE_PATH, "Evidencia fotografica")
ZIP_PATH = os.path.join(BASE_PATH, "Zips")
DOC_PATH = os.path.join(BASE_PATH, "Visitas")

# **CREAR CARPETAS SI NO EXISTEN**
os.makedirs(EVIDENCE_PATH, exist_ok=True)
os.makedirs(ZIP_PATH, exist_ok=True)
os.makedirs(DOC_PATH, exist_ok=True)

# **METAS IDENTIFICADAS DEL DOCUMENTO**
metas = [
    "Efectuar 3 Informes trimestrales del Programa de mejora de la supervisi√≥n",
    "Realizar 12 Informes (uno cada mes) de Actividades Relevantes",
    "Realizar seguimiento a la implementaci√≥n de los planes de asesor√≠a en los diferentes niveles educativos",
    "Realizar 10 jornadas acad√©micas con la estructura de supervisi√≥n para fortalecer la comunicaci√≥n interna",
    "Implementar acciones para la actualizaci√≥n sobre m√©todos de asesor√≠a y comunicaci√≥n asertiva",
    "Promover la participaci√≥n de los PCD y ECAEF en los CTE para implementar el plan anal√≠tico",
    "Implementar una estrategia de intervenci√≥n y colaboraci√≥n en el Consejo T√©cnico Escolar",
    "Desarrollar una estrategia de acompa√±amiento en la implementaci√≥n del Plan y Programas de Estudio",
    "Aplicar un plan de asesor√≠a de Educaci√≥n F√≠sica en educaci√≥n b√°sica",
    "Lograr la participaci√≥n del 100% de docentes en el CTE",
    "Realizar asesor√≠a y acompa√±amiento para el 100% de docentes con y sin perfil profesional",
    "Desarrollar una estrategia de intervenci√≥n en el CTE y talleres intensivos de formaci√≥n continua",
    "Desarrollar una estrategia de actualizaci√≥n sobre la propuesta curricular 2022",
    "Realizar al menos tres visitas trimestrales de asesor√≠a a docentes de secundaria",
    "Implementar estrategias para proyectos de educaci√≥n f√≠sica estatales",
    "Dise√±ar una estrategia para la actividad f√≠sica y el cuidado de la salud en el 100% de las escuelas",
    "Implementar al 100% las estrategias de fortalecimiento acad√©mico",
    "Dise√±ar e implementar las etapas de los Juegos Deportivos Escolares"
]

# **CONFIGURACI√ìN DE STREAMLIT**
st.set_page_config(page_title="Registro de Actividades", layout="wide")
st.title("üìÇ Registro de Actividades en Streamlit")

# **SELECCI√ìN DE ACTIVIDAD Y META**
actividad = st.text_input("üìå Ingrese la actividad:")
fecha_actividad = st.date_input("üìÖ Seleccione la fecha de la actividad:")
turno = st.radio("‚è∞ Seleccione el turno:", ("Matutino (08:00 - 12:30)", "Vespertino (13:30 - 16:30)"))
meta = st.selectbox("üéØ Seleccione la meta atendida:", metas)

# **SUBIDA DEL DOCUMENTO A CONVERTIR A PDF**
st.subheader("üìÑ Seleccione el documento en imagen que se convertir√° en PDF")
documento = st.file_uploader("üìé Subir documento en formato JPG o PNG", type=["jpg", "jpeg", "png"])

# **SUBIDA DE FOTOGRAF√çAS COMO EVIDENCIA**
st.subheader("üìé Cargar hasta 3 fotos de la actividad")
uploaded_files = st.file_uploader("üìé Subir evidencias", type=["jpg", "jpeg", "png"], accept_multiple_files=True)

# **GUARDADO DE ARCHIVOS**
doc_path = ""
foto_paths = []

if documento:
    doc_name = f"Documento-{actividad}-{fecha_actividad.strftime('%Y-%m-%d')}.jpg"
    doc_path = os.path.join(DOC_PATH, doc_name)
    with open(doc_path, "wb") as f:
        f.write(documento.getbuffer())
    st.success("‚úÖ Documento guardado correctamente.")

if uploaded_files:
    for i, file in enumerate(uploaded_files, 1):
        file_name = f"Evidencia-{actividad}-{fecha_actividad.strftime('%Y-%m-%d')}-{i:02}.jpg"
        file_path = os.path.join(EVIDENCE_PATH, file_name)
        with open(file_path, "wb") as f:
            f.write(file.getbuffer())
        foto_paths.append(file_path)
    st.success("‚úÖ Evidencias guardadas correctamente.")

# **GENERACI√ìN DE ARCHIVO ZIP**
def create_zip():
    zip_name = f"Registro_{actividad}_{fecha_actividad.strftime('%Y%m%d')}.zip"
    zip_path = os.path.join(ZIP_PATH, zip_name)
    with zipfile.ZipFile(zip_path, 'w') as zipf:
        if documento:
            zipf.write(doc_path, os.path.basename(doc_path))
        for file_path in foto_paths:
            zipf.write(file_path, os.path.basename(file_path))
    return zip_path

if st.button("üì• Generar ZIP y Descargar"):
    if documento or foto_paths:
        zip_path = create_zip()
        st.success(f"‚úÖ Archivo ZIP generado: {zip_path}")
        with open(zip_path, "rb") as f:
            st.download_button("‚¨áÔ∏è Descargar ZIP", f, file_name=os.path.basename(zip_path))
    else:
        st.warning("‚ö†Ô∏è No hay archivos para comprimir.")

st.info("üìå Recuerda que este ZIP ser√° procesado por la interfaz local para generar auditor√≠as.")
